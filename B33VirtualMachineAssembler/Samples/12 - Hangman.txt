; This program is the standard implementation
; of the Hangman game. When you run the program,
; a random word is chosen. You get 6 chances
; to guess letters and try to guess the word. 
; After 6 guesses, the man is "hung" and you
; lose the game. Good Luck!
; ------------------------------------------------
; Note, you are free to add more words to the
; list, if you wish. Just add the word,
; followed by a zero character. Also, be sure
; to update the "numwords" constant below to
; reflect the number of total words in the game.
words       str         "puppy"
            chr         0
            str         "bikini"
            chr         0
            str         "galaxy"
            chr         0
            str         "jazz"
            chr         0
            str         "kitty"
            chr         0
            str         "dog"
            chr         0
            str         "cat"
            chr         0
            str         "pixel"
            chr         0
            str         "computer"
            chr         0
            str         "freezer"
            chr         0
            str         "link"
            chr         0
            str         "mother"
            chr         0
            str         "father"
            chr         0
            str         "daughter"
            chr         0
            str         "son"
            chr         0
            str         "clock"
            chr         0
            str         "planet"
            chr         0
            str         "universal"
            chr         0
            str         "oven"
            chr         0
            str         "sandwich"
            chr         0
            str         "notebook"
            chr         0
            str         "key"
            chr         0
            str         "ticket"
            chr         0
            str         "coffee"
            chr         0
            str         "wash"
            chr         0
            str         "caffeine"
            chr         0
numwords    chr         26
welcomeMsg  str         "Welcome to Hangman!"
            chr         0
guessMsg    str         "Guess a letter that belongs in this word -->"
            chr         0
glMsg       str         "Guessed Letters -->"
            chr         0
glBlank     str         "                                                                           "
            chr         0
winMsg      str         "You won!"
            chr         0
loseMsg     str         "You lost! The word was "
            chr         34
            chr         0
currentStep rmb         1
guessedLet  rmb         26
wordBuffer  rmb         50
puzBuffer   rmb         50
inPuzzle    rmb         1
start       call        init
            ldx         #welcomeMsg
            ldy         #$e000
            call        print
            addy        #340
            call        drawHangman
            call        getPuzzle
            ldy         #wordBuffer
mainLoop1   lda         ,x+
            cmpa        #0
            jeq         mainDone1
            sta         ,y+
            jmp         mainLoop1
mainDone1   ldx         #wordBuffer
            ldy         #puzBuffer
            ldb         #$2d
mainLoop2   lda         ,x+
            cmpa        #0
            jeq         mainDone2
            stb         ,y+
            jmp         mainLoop2
mainDone2   sta         ,y
            ldx         #guessMsg
            ldy         #$e780
            call        print
            addy        #90
            call        prtPuzzle
            call        prtGLetters
mainLoop3   call        key
            cmpa        #0
            jeq         mainLoop3
            cmpa        #27
            jeq         finish
            anda        #%11011111
            cmpa        #65
            jlt         mainLoop3
            cmpa        #90
            jgt         mainLoop3
            call        validLetter
            cmpb        #1
            jeq         mainLoop3
            call        addGLetter
            call        prtGLetters
            call        chkInPuzzle
            ldy         #$e780
            addy        #$5a
            call        prtPuzzle
            ldx         #inPuzzle
            lda         ,x
            cmpa        #0
            jeq         wrong
            call        chkWin
            cmpa        #1
            jeq         wGameOver
            jmp         mainLoop3
wrong       ldx         #currentStep
            lda         ,x
            adda        #$01
            sta         ,x
            ldy         #$e000
            addy        #$0154
            call        drawHangman
            cmpa        #6
            jeq         lGameOver
            jmp         mainLoop3
wGameOver   ldx         #winMsg
            ldy         #$e000
            addy        #$0780
            addy        #$00a0
            call        print
            ldx         #glBlank
            ldy         #$e780
            call        print
            addy        #$0140
            call        print
            jmp         finish
lGameOver   ldx         #loseMsg
            ldy         #$e000
            addy        #$0780
            addy        #$00a0
            call        print
            ldx         #wordBuffer
mLoop2      lda         ,x+
            cmpa        #0
            jeq         mDone2
            jmp         mLoop2
mDone2      subx        #1
            lda         #$22
            sta         ,x
            ldx         #wordBuffer
            addy        #$30
            call        print
            ldx         #glBlank
            ldy         #$e780
            call        print
            addy        #$0140
            call        print
            jmp         finish
finish      end         start
chkWin      push        x
            ldx         #puzBuffer
cwLoop1     lda         ,x+
            cmpa        #0
            jeq         cwDone1
            cmpa        #$2d
            jeq         cwNoWin
            jmp         cwLoop1
cwNoWin     lda         #0
            pop         x
            ret
cwDone1     lda         #1
            pop         x
            ret
validLetter push        a
            push        x
            ldx         #guessedLet
vlLoop1     ldb         ,x+
            cmpb        #0
            jeq         vlDone1
            andb        #%11011111
            cmpb        a
            jeq         vlDone2
            jmp         vlLoop1
vlDone1     ldb         #0
            jmp         vlDone3
vlDone2     ldb         #1
vlDone3     pop         x
            pop         a
            ret
chkInPuzzle push        x
            push        y
            push        b
            ldx         #inPuzzle
            ldb         #0
            stb         ,x
            ldx         #wordBuffer
            ldy         #puzBuffer
            ldb         #0
cipLoop1    push        b
            ldb         ,x+
            andb        #%11011111
            cmpb        #0
            jeq         cipDone1
            cmpb        a
            jeq         cipInPuz
            pop         b
            addb        #1
            jmp         cipLoop1
cipInPuz    push        x
            ldx         #inPuzzle
            ldb         #1
            stb         ,x
            pop         x
            pop         b
            sta         b,y
            addb        #1
            jmp         cipLoop1
cipDone1    pop         b
            pop         b
            pop         y
            pop         x
            ret
addGLetter  push        x
            push        b
            ldx         #guessedLet
aglLoop1    ldb         ,x+
            cmpb        #0
            jeq         aglDone1
            jmp         aglLoop1
aglDone1    subx        #1
            sta         ,x
            pop         b
            pop         x
            ret
prtGLetters push        y
            push        x
            push        a
            ldx         #glMsg
            ldy         #$e780
            addy        #320
            call        print
            addy        #40
            ldx         #guessedLet
glLoop1     lda         ,x+
            cmpa        #0
            jeq         glDone1
            sta         ,y++
            jmp         glLoop1
glDone1     pop         a
            pop         x
            pop         y
            ret
prtPuzzle   push        y
            push        x
            push        a
            ldx         #puzBuffer
ppLoop1     lda         ,x+
            cmpa        #0
            jeq         ppDone1
            sta         ,y++
            jmp         ppLoop1
ppDone1     pop         a
            pop         x
            pop         y
            ret
getPuzzle   push        y
            push        a
            push        b
            ldy         #words
            ldx         #numwords
            lda         ,x
            adda        #1
            rnd         a
            ldb         #0
gpLoop2     cmpb        a
            jeq         gpDone
            push        a
gpLoop1     lda         ,y+
            cmpa        #0
            jeq         gpDone1
            jmp         gpLoop1
gpDone1     pop         a
            addb        #1
            jmp         gpLoop2
gpDone      tfr         y,x
            pop         b
            pop         a
            pop         y
            ret
drawHangman push        x
            push        y
            ldx         #currentStep
            lda         #$7c
            addy        #2
            sta         ,y++
            lda         #$2d
            sta         ,y++
            sta         ,y++
            sta         ,y++
            sta         ,y++
            lda         #$7c
            sta         ,y
            addy        #160
            sta         ,y
            addy        #160
            sta         ,y
            addy        #160
            sta         ,y
            addy        #160
            sta         ,y
            addy        #160
            sta         ,y
            addy        #160
            sta         ,y
            addy        #160
            sta         ,y
            addy        #160
            sta         ,y
            pop         y           
            push        y
            addy        #162
            sta         ,y
            pop         y
            push        y
            lda         ,x
            cmpa        #1
            jeq         hm1
            cmpa        #2
            jeq         hm2
            cmpa        #3
            jeq         hm3
            cmpa        #4
            jeq         hm4
            cmpa        #5
            jeq         hm5
            cmpa        #6
            jeq         hm6
            jmp         hmEnd
hm1         call        hmDrawHead
            jmp         hmEnd
hm2         call        hmDrawHead
            call        hmDrawTorso
            jmp         hmEnd
hm3         call        hmDrawHead
            call        hmDrawTorso
            call        hmDrawLHand
            jmp         hmEnd
hm4         call        hmDrawHead
            call        hmDrawTorso
            call        hmDrawLHand
            call        hmDrawRHand
            jmp         hmEnd
hm5         call        hmDrawHead
            call        hmDrawTorso
            call        hmDrawLHand
            call        hmDrawRHand
            call        hmDrawLFoot
            jmp         hmEnd
hm6         call        hmDrawHead
            call        hmDrawTorso
            call        hmDrawLHand
            call        hmDrawRHand
            call        hmDrawLFoot
            call        hmDrawRFoot
hmEnd       pop         y
            pop         x
            ret
hmDrawHead  push        y
            push        a
            addy        #322
            lda         #$4f
            sta         ,y
            pop         a
            pop         y
            ret
hmDrawTorso push        y
            push        a
            addy        #482
            lda         #$7c
            sta         ,y
            addy        #160
            sta         ,y
            pop         a
            pop         y
            ret
hmDrawLHand push        y
            push        a
            addy        #480
            lda         #$5c
            sta         ,y
            pop         a
            pop         y
            ret
hmDrawRHand push        y
            push        a
            addy        #484
            lda         #$2f
            sta         ,y
            pop         a
            pop         y
            ret
hmDrawLFoot push        y
            push        a
            addy        #800
            lda         #$2f
            sta         ,y
            pop         a
            pop         y
            ret
hmDrawRFoot push        y
            push        a
            addy        #804
            lda         #$5c
            sta         ,y
            pop         a
            pop         y
            ret
init        ldx         #currentStep
            lda         #0
            sta         ,x
            ldx         #guessedLet
            ldb         #0
            lda         #0
initloop1   sta         b,x
            addb        #1
            cmpb        #26
            jne         initloop1
            ldx         #wordBuffer
            ldb         #0
initloop2   sta         b,x
            addb        #1
            cmpb        #50
            jne         initloop2
            ldx         #puzBuffer
            ldb         #0
initloop3   sta         b,x
            addb        #1
            cmpb        #50
            jne         initloop3
            ret
print       push        a
            push        b
            push        x
            push        y
            tfr         y,d
            push        d
prntloop1   lda         ,x+
            cmpa        #0
            jeq         prntfinish
            cmpa        #13
            jeq         prnt2
            sta         ,y++
            jmp         prntloop1
prnt2       pop         d
            addd        #160
            tfr         d,y
            push        d
            jmp         prntloop1
prntfinish  pop         d
            pop         y
            pop         x
            pop         b
            pop         a
            ret
key         push        x
            ldx         #$ffff
            lda         ,x
            pop         x
            ret

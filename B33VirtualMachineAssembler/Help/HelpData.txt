1,"END",0,"END <label>","None",1,"End","Stops Program Execution and tells the assembler where to begin exection. Execution begins at <label>","End Program"
2,"LDA",1,"LDA #<number>","Immediate",2,"A = <number>","Loads <number> into the A register.","A = {0}"
3,"LDB",2,"LDB #<number>","Immediate",2,"B = <number>","Loads <number> into the B register.","B = {0}"
4,"LDX",3,"LDX #<number>","Immediate",3,"X = <number>","Loads <number> into the X register.","X = {0}"
5,"LDY",4,"LDY #<number>","Immediate",3,"Y = <number>","Loads <number> into the Y register.","Y = {0}"
6,"LDD",5,"LDD #<number>","Immediate",3,"D = <number>","Loads <number> into the D register.","D = {0}"
7,"STA",6,"STA (<address>) |( #<address>|<label>)","Extended",3,"Memory Location of <address> = A","Stores A into the memory location of <address> or <label>","{0} = A"
8,"STB",7,"STB (<address>) |( #<address>|<label>)","Extended",3,"Memory Location of <address> = B","Stores B into the memory location of <address> or <label>","{0} = B"
9,"STX",8,"STX (<address>) |( #<address>|<label>)","Extended",3,"Memory Location of <address> = X","Stores X into the memory location of <address> or <label>","{0}"
10,"STY",9,"STY (<address>) |( #<address>|<label>)","Extended",3,"Memory Location of <address> = Y","Stores Y into the memory location of <address> or <label>","{0}"
11,"STD",10,"STD (<address>) |( #<address>|<label>)","Extended",3,"Memory Location of <address> = D","Stores D into the memory location of <address> or <label>","{0}"
12,"LDA",11,"LDA <address>","Extended",3,"A = Byte Located at address of <address>","Takes the data stored at the memory location of <address> and places it into the A register.","A = [Data At {0}]"
13,"LDB",12,"LDB <address>","Extended",3,"B = Byte Located at address of <address>","Takes the data stored at the memory location of <address> and places it into the B register.","B = [Data At {0}]"
14,"LDX",13,"LDX <address>","Extended",3,"X = Word Located at address of <address>","Takes the data stored at the memory location of <address> and places it into the X register.","X = [Data At {0}]"
15,"LDY",14,"LDY <address>","Extended",3,"Y = Word Located at address of <address>","Takes the data stored at the memory location of <address> and places it into the Y register.","Y = [Data At {0}]"
16,"LDD",15,"LDD <address>","Extended",3,"D = Word Located at address of <address>","Takes the data stored at the memory location of <address> and places it into the D register.","D = [Data At {0}]"
17,"STA",16,"STA [A|B],X|Y|D[+|++|-|--]","Indexed",3,"Data at Memory Location pointed to by X + Indexer, Y + Indexer or D + Indexer = A. ","Stores the value of A into the memory pointed to by X, Y or D plus an optional indexer. If a postfix operator is applied, then X, Y or D is incremented or decremented by 1 or 2.","{0}"
18,"STB",17,"STB [A|B],X|Y|D[+|++|-|--]","Indexed",3,"Data at Memory Location pointed to by X + Indexer, Y + Indexer or D + Indexer = B. ","Stores the value of B into the memory pointed to by X, Y or D plus an optional indexer. If a postfix operator is applied, then X, Y or D is incremented or decremented by 1 or 2.","{0}"
19,"CMPA",18,"CMPA #<number>","Immediate",2,"Compare A Register to <number>","Compares the A register to <number>","Compare A to {0}"
20,"CMPB",19,"CMPB #<number>","Immediate",2,"Compare B Register to <number>","Compares the B register to <number>","Compare B to {0}"
21,"CMPD",20,"CMPD #<number>","Immediate",3,"Compare D Register to <number>","Compares the D register to <number>","Compare D to {0}"
22,"CMPX",21,"CMPX #<number>","Immediate",3,"Compare X Register to <number>","Compares the X register to <number>","Compare X to {0}"
23,"CMPY",22,"CMPY #<number>","Immediate",3,"Compare Y Register to <number>","Compares the Y register to <number>","Compare Y to {0}"
24,"JEQ",23,"JEQ <label> | <address>","Immediate",3,"If last compare is equal then goto <label> | <address>","If the result of the last compare is equal, then jump to the <label> or <address>.","If equal, goto {0}"
25,"JNE",24,"JNE <label> | <address>","Immediate",3,"If last compare is not equal then goto <label> | <address>","If the result of the last compare is not equal, then jump to the <label> or <address>.","If not equal, goto {0}"
26,"LDA",25,"LDA [A|B],X|Y|D[+|++|-|--]","Indexed",3,"A = Byte Located at address pointed to by X|Y|D","Get the data pointed to by the address stored in X, Y or D register and store it in the A register. If a postfix operator is present, then X, Y or D is incremented or decremented by 1 or 2.","{0}"
27,"LDA",26,"LDB [A|B],X|Y|D[+|++|-|--]","Indexed",3,"B = Byte Located at address pointed to by X|Y|D","Get the data pointed to by the address stored in X, Y or D register and store it in the B register. If a postfix operator is present, then X, Y or D is incremented or decremented by 1 or 2.","{0}"
28,"JGE",32,"JGE <label> | <address>","Immediate",3,"If last compare is greater than or equal then goto <label> | <address>","If the result of the last compare is greater than or equal, then jump to the <label> or <address>.","If greater than or equal, goto {0}"
29,"JLE",33,"JLE <label> | <address>","Immediate",3,"If last compare is less than or equal then goto <label> | <address>","If the result of the last compare is less than or equal, then jump to the <label> or <address>.","If less than or equal, goto {0}"
30,"JLT",34,"JLT <label> | <address>","Immediate",3,"If last compare is less than then goto <label> | <address>","If the result of the last compare is less than, then jump to the <label> or <address>.","If less than, goto {0}"
31,"JGT",35,"JGT <label> | <address>","Immediate",3,"If last compare is greater than then goto <label> | <address>","If the result of the last compare is greater than, then jump to the <label> or <address>.","If greater than, goto {0}"
32,"JMP",36,"JMP <label> | <address>","Immediate",3,"Goto <label> | <address>","Transfers execution control to the <label> | <address>.","Goto {0}"
33,"PUSH",37,"PUSH A|B|D|X|Y","Register",2,"Stack = A|B|D|X|Y","Pushes the value of the A|B|D|X|Y register onto the stack.","Push the value of the {0} register onto the stack."
34,"POP",38,"POP A|B|D|X|Y","Register",2,"A|B|D|X|Y = Stack","Pops the value of the stack and places it into the A|B|D|X|Y register.","Pop the next value off the stack and store it in the {0} register."
35,"CALL",39,"CALL <label> | <address>","Immediate",3,"Save execution location then goto <label> | <address>","Transfers execution control to the <label> | <address> and returns once a RET opcode is hit.","Call the subroutine at {0}"
36,"RET",40,"RET","None",1,"Return to saved CALL location","Returns execution control to the location after the last CALL opcode.","Return from subroutine"
37,"SUBA",42,"SUBA #<number>","Immediate",2,"A = A - <number>","Subtracts <number> from the A register and stores the result in the A register.","A = A - {0}"
38,"SUBB",43,"SUBB #<number>","Immediate",2,"B = B - <number>","Subtracts <number> from the B register and stores the result in the B register.","B = B - {0}"
39,"SUBD",44,"SUBD #<number>","Immediate",3,"D = D - <number>","Subtracts <number> from the D register and stores the result in the D register.","D = D - {0}"
40,"SUBX",45,"SUBX #<number>","Immediate",3,"X = X - <number>","Subtracts <number> from the X register and stores the result in the X register.","X = X - {0}"
41,"SUBY",46,"SUBY #<number>","Immediate",3,"Y = Y - <number>","Subtracts <number> from the Y register and stores the result in the Y register.","Y = Y - {0}"
42,"ADDA",47,"ADDA #<number>","Immediate",2,"A = A + <number>","Adds <number> to the A register and stores the result in the A register.","A = A + {0}"
43,"ADDB",48,"ADDB #<number>","Immediate",2,"B = B + <number>","Adds <number> to the B register and stores the result in the B register.","B = B + {0}"
44,"ADDD",49,"ADDD #<number>","Immediate",3,"D = D + <number>","Adds <number> to the D register and stores the result in the D register.","D = D + {0}"
45,"ADDX",50,"ADDX #<number>","Immediate",3,"X = X + <number>","Adds <number> to the X register and stores the result in the X register.","X = X + {0}"
46,"ADDY",51,"ADDY #<number>","Immediate",3,"Y = Y + <number>","Adds <number> to the Y register and stores the result in the Y register.","Y = Y + {0}"
47,"ADDA",57,"ADDA A|B","Register",2,"A = A + A|B","Adds either the A Register or the B Register to the A register and stores the result in the A register.","A = A + {0}"
48,"ADDB",58,"ADDB A|B","Register",2,"B = B + A|B","Adds either the A Register or the B Register to the B register and stores the result in the B register.","B = B + {0}"
49,"ADDD",59,"ADDD A|B|D|X|Y","Register",2,"D = D + A|B|D|X|Y","Adds either the A Register, the B Register, the D Register, the X Register, or the Y Register to the D register and stores the result in the D register.","D = D + {0}"
50,"ADDX",60,"ADDX A|B|D|X|Y","Register",2,"X = X + A|B|D|X|Y","Adds either the A Register, the B Register, the D Register, the X Register, or the Y Register to the X register and stores the result in the X register.","X = X + {0}"
51,"ADDY",61,"ADDY A|B|D|X|Y","Register",2,"Y = Y + A|B|D|X|Y","Adds either the A Register, the B Register, the D Register, the X Register, or the Y Register to the Y register and stores the result in the Y register.","Y = Y + {0}"
52,"SUBA",52,"SUBA A|B","Register",2,"A = A - A|B","Subtracts either the A Register or the B Register from the A register and stores the result in the A register.","A = A - {0}"
53,"SUBB",53,"SUBB A|B","Register",2,"B = B - A|B","Subtracts either the A Register or the B Register from the B register and stores the result in the B register.","B = B - {0}"
54,"SUBD",54,"SUBD A|B|D|X|Y","Register",2,"D = D - A|B|D|X|Y","Subtracts either the A Register, the B Register, the D Register, the X Register, or the Y Register from the D register and stores the result in the D register.","D = D - {0}"
55,"SUBX",55,"SUBX A|B|D|X|Y","Register",2,"X = X - A|B|D|X|Y","Subtracts either the A Register, the B Register, the D Register, the X Register, or the Y Register from the X register and stores the result in the X register.","X = X - {0}"
56,"SUBY",56,"SUBY A|B|D|X|Y","Register",2,"Y = Y - A|B|D|X|Y","Subtracts either the A Register, the B Register, the D Register, the X Register, or the Y Register from the Y register and stores the result in the Y register.","Y = Y - {0}"
57,"TFR",62,"TFR (A|B,A|B) | (D|X|Y,D|X|Y)","Register",3,"A|B|D|X|Y = A|B|D|X|Y","Sets the value of the second register to that of the first register. TFR A,B would make B = A.","{0} = {1}"
58,"CMPA",63,"CMPA A|B|D|X|Y","Register",2,"Compare A Register to A|B|D|X|Y","Compares the A register to A|B|D|X|Y","Compare A to {0}"
59,"CMPB",64,"CMPB A|B|D|X|Y","Register",2,"Compare B Register to A|B|D|X|Y","Compares the B register to A|B|D|X|Y","Compare B to {0}"
60,"CMPD",65,"CMPD A|B|D|X|Y","Register",2,"Compare D Register to A|B|D|X|Y","Compares the D register to A|B|D|X|Y","Compare D to {0}"
61,"CMPX",66,"CMPX A|B|D|X|Y","Register",2,"Compare X Register to A|B|D|X|Y","Compares the X register to A|B|D|X|Y","Compare X to {0}"
62,"CMPY",67,"CMPY A|B|D|X|Y","Register",2,"Compare Y Register to A|B|D|X|Y","Compares the Y register to A|B|D|X|Y","Compare Y to {0}"
63,"LSFT",68,"LSFT A|B|D|X|Y","Register",2,"A|B|D|X|Y << 1","Shifts the bits of A|B|D|X|Y register to the left. The MSB is placed in the overflow flag.","{0} = {0} << 1"
64,"RSFT",69,"RSFT A|B|D|X|Y","Register",2,"A|B|D|X|Y >> 1","Shifts the bits of A|B|D|X|Y register to the right. The LSB is placed in the overflow flag.","{0} = {0} >> 1"
65,"JOS",70,"JOS <label>","Immediate",3,"If Overflow Flag is set then goto <label>","If the overflow flag of the CC register is set, then execution jumps to the <label>","If Overflow Flag is set, then goto {0}"
66,"JOC",71,"JOC <label>","Immediate",3,"If Overflow Flag is not set then goto <label>","If the overflow flag of the CC register is not set, then execution jumps to the <label>","If Overflow Flag is not set, then goto {0}"
67,"MUL8",72,"MUL8 <register1>,<register2>","Register",3,"<register1> = <register1> * <register2>","Multiplies <register1> and <register2> and stores the 8-bit result in <register1>. Both <register1> and <register2> must be either the A register or the B register.","{0} = {0} * {1}"
68,"MUL16",73,"MUL16 <register1>,<register2>","Register",3,"<register1> = <register1> * <register2>","Multiplies <register1> and <register2> and stores the 16-bit result in <register1>. <register1> must be either X, Y, or D.","{0} = {0} * {1}"
69,"ANDA",74,"ANDA #<number>","Immediate",2,"A = A AND <number>","Performs a bitwise AND on the A register and <number> and stores the result in the A register.","A = A AND {0}"
70,"ANDB",75,"ANDB #<number>","Immediate",2,"B = B AND <number>","Performs a bitwise AND on the B register and <number> and stores the result in the B register.","B = B AND {0}"
71,"ANDD",76,"ANDD #<number>","Immediate",3,"D = D AND <number>","Performs a bitwise AND on the D register and <number> and stores the result in the D register.","D = D AND {0}"
72,"ANDX",77,"ANDX #<number>","Immediate",3,"X = X AND <number>","Performs a bitwise AND on the X register and <number> and stores the result in the X register.","X = X AND {0}"
73,"ANDY",78,"ANDY #<number>","Immediate",3,"Y = Y AND <number>","Performs a bitwise AND on the Y register and <number> and stores the result in the Y register.","Y = Y AND {0}"
74,"ANDA",79,"ANDA A|B","Register",2,"A = A AND A|B","Performs a bitwise AND on the A register and either the A or B register and stores the result in the A register.","A = A AND {0}"
75,"ANDB",80,"ANDB A|B","Register",2,"B = B AND A|B","Performs a bitwise AND on the B register and either the A or B register and stores the result in the B register.","B = B AND {0}"
76,"ANDD",81,"ANDD A|B|D|X|Y","Register",2,"D = D AND A|B|D|X|Y","Performs a bitwise AND on the D register and either the A, B, D, X, or Y register and stores the result in the D register.","D = D AND {0}"
77,"ANDX",82,"ANDX A|B|D|X|Y","Register",2,"X = X AND A|B|D|X|Y","Performs a bitwise AND on the X register and either the A, B, D, X, or Y register and stores the result in the X register.","X = X AND {0}"
78,"ANDY",83,"ANDY A|B|D|X|Y","Register",3,"Y = Y AND A|B|D|X|Y","Performs a bitwise AND on the Y register and either the A, B, D, X, or Y register and stores the result in the Y register.","Y = Y AND {0}"
79,"ORA",84,"ORA #<number>","Immediate",2,"A = A OR <number>","Performs a bitwise OR on the A register and <number> and stores the result in the A register.","A = A OR {0}"
80,"ORB",85,"ORB #<number>","Immediate",2,"B = B OR <number>","Performs a bitwise OR on the B register and <number> and stores the result in the B register.","B = B OR {0}"
81,"ORD",86,"ORD #<number>","Immediate",3,"D = D OR <number>","Performs a bitwise OR on the D register and <number> and stores the result in the D register.","D = D OR {0}"
82,"ORX",87,"ORX #<number>","Immediate",3,"X = X OR <number>","Performs a bitwise OR on the X register and <number> and stores the result in the X register.","X = X OR {0}"
83,"ORY",88,"ORY #<number>","Immediate",3,"Y = Y OR <number>","Performs a bitwise OR on the Y register and <number> and stores the result in the Y register.","Y = Y OR {0}"
84,"ORA",89,"ORA A|B","Register",2,"A = A OR A|B","Performs a bitwise OR on the A register and either the A or B register and stores the result in the A register.","A = A OR {0}"
85,"ORB",90,"ORB A|B","Register",2,"B = B OR A|B","Performs a bitwise OR on the B register and either the A or B register and stores the result in the B register.","B = B OR {0}"
86,"ORD",91,"ORD A|B|D|X|Y","Register",2,"D = D OR A|B|D|X|Y","Performs a bitwise OR on the D register and either the A, B, D, X, or Y register and stores the result in the D register.","D = D OR {0}"
87,"ORX",92,"ORX A|B|D|X|Y","Register",2,"X = X OR A|B|D|X|Y","Performs a bitwise OR on the X register and either the A, B, D, X, or Y register and stores the result in the X register.","X = X OR {0}"
88,"ORY",93,"ORY A|B|D|X|Y","Register",3,"Y = Y OR A|B|D|X|Y","Performs a bitwise OR on the Y register and either the A, B, D, X, or Y register and stores the result in the Y register.","Y = Y OR {0}"
89,"DIV8",94,"DIV8 <register1>,<register2>","Register",3,"A = <register1> / <register2>, B = <register1> % <register2>","Divides <register1> by <register2>. The quotient is stored in the A register. The remainder or modulo is stored in the B register. Both <register1> and <register2> must be either the A register or the B register.","A = {0} / {1}, B = {0} % {1}"
90,"DIV16",95,"DIV16 <register1>,<register2>","Register",3,"X = <register1> / <register2>, Y = <register1> % <register2>","Divides <register1> by <register2>. The quotient is stored in the X register. The remainder or modulo is stored in the Y register. <register1> must be the X, Y, or D register.","X = {0} / {1}, Y = {0} % {1}"
91,"XORA",96,"XORA #<number>","Immediate",2,"A = A XOR <number>","Performs a bitwise XOR on the A register and <number> and stores the result in the A register.","A = A XOR {0}"
92,"XORB",97,"XORB #<number>","Immediate",2,"B = B XOR <number>","Performs a bitwise XOR on the B register and <number> and stores the result in the B register.","B = B XOR {0}"
93,"XORD",98,"XORD #<number>","Immediate",3,"D = D XOR <number>","Performs a bitwise XOR on the D register and <number> and stores the result in the D register.","D = D XOR {0}"
94,"XORX",99,"XORX #<number>","Immediate",3,"X = X XOR <number>","Performs a bitwise XOR on the X register and <number> and stores the result in the X register.","X = X XOR {0}"
95,"XORY",100,"XORY #<number>","Immediate",3,"Y = Y XOR <number>","Performs a bitwise XOR on the Y register and <number> and stores the result in the Y register.","Y = Y XOR {0}"
96,"XORA",101,"XORA A|B","Register",2,"A = A XOR A|B","Performs a bitwise XOR on the A register and either the A or B register and stores the result in the A register.","A = A XOR {0}"
97,"XORB",102,"XORB A|B","Register",2,"B = B XOR A|B","Performs a bitwise XOR on the B register and either the A or B register and stores the result in the B register.","B = B XOR {0}"
98,"XORD",103,"XORD A|B|D|X|Y","Register",2,"D = D XOR A|B|D|X|Y","Performs a bitwise XOR on the D register and either the A, B, D, X, or Y register and stores the result in the D register.","D = D XOR {0}"
99,"XORX",104,"XORX A|B|D|X|Y","Register",2,"X = X XOR A|B|D|X|Y","Performs a bitwise XOR on the X register and either the A, B, D, X, or Y register and stores the result in the X register.","X = X XOR {0}"
100,"XORY",105,"XORY A|B|D|X|Y","Register",3,"Y = Y XOR A|B|D|X|Y","Performs a bitwise XOR on the Y register and either the A, B, D, X, or Y register and stores the result in the Y register.","Y = Y XOR {0}"
101,"RND",106,"RND A|B","Register",2,"A|B = Random(0, A|B)","Returns a random number between 0 and A|B exclusively and returns the result in the A|B register.","{0} = Random({0})"
102,"CLS",112,"CLS","None",1,"Clear Screen","Clears the terminal screen","Clears the screen"
103,"NOP",110,"NOP","None",1,"None","Does nothing. Used as a filler","Do Nothing"
104,"NEG",111,"NEG A|B|D|X|Y","Register",2,"A|B|D|X|Y = ~A|B|D|X|Y","Performs a negate on the specified register. Inverts all the bits, then adds 1.","{0} = ~{0} + 1"
